
--------------Foothill Class Part A---------------

// FHstack main
// CS 1C, Foothill College, Michael Loceff, creator

// import statement needed to gain access to the entire class
import cs_1c.*;
import java.util.*;
public class Foothill
{
	
   // -------  main --------------
   public static void main(String[] args) throws Exception
   {
      int target = 72;
      ArrayList<Integer> dataSet = new ArrayList<Integer>();
      ArrayList<Sublist> choices = new ArrayList<Sublist>();
      int k, j, numSets, masterSum;
      int max = 0;
      int kBest = 0;
      boolean foundPerfect;

      dataSet.add(2); dataSet.add(12); dataSet.add(22);
      dataSet.add(5); dataSet.add(15); dataSet.add(25);
      dataSet.add(9); dataSet.add(19); dataSet.add(29);
      
      //original collection arraylist of sublists
      //sublists contain arraylist of indices
      //push new add item sublists into 
      Sublist sublist = new Sublist(dataSet);
      choices.add(sublist);
      
      for (k = 0; k < dataSet.size(); k++){
    	  ArrayList<Sublist> sublistToAdd = new ArrayList<Sublist>();
    	  for ( j = 0; j < choices.size(); j++){
    		  if(choices.get(j).getSum() + dataSet.get(k) <= target){
    			  sublistToAdd.add(((Sublist)choices.get(j).clone()).addItem(k));
    			  if(choices.get(j).getSum() + dataSet.get(k) == target){
    	    			 k = dataSet.size() +1;
    	    	         break;
    	    		  }
    			  
    		  }
    		 
    	  }
    	  choices.addAll(sublistToAdd);
      }

      for (int i = 0; i < choices.size(); i++){
         if(choices.get(i).getSum() > max){
        	 max = choices.get(i).getSum();
        	 kBest = i;
         }
      }
      if (max < target){
    	  System.out.println("did not reach targeted amount!");
    	  
      }
      System.out.println("Target time: " + target);
      System.out.println("Sublist -----------------------------");
      choices.get(kBest).showSublist();
   }
   
}
   class Sublist implements Cloneable
{
   private int sum = 0;
   private ArrayList<Integer> originalObjects;
   private ArrayList<Integer> indices;
   
   // constructor creates an empty Sublist (no indices)
   public Sublist(ArrayList<Integer> orig) 
   {
      sum = 0;
      originalObjects = orig;
      indices = new ArrayList<Integer>();
   }
   
   int getSum() { return sum; }
   
   // I have done the clone() for you, since you will need clone() inside addItem().
   public Object clone() throws CloneNotSupportedException
   {
      // shallow copy
      Sublist newObject = (Sublist)super.clone();
      // deep copy
      newObject.indices = (ArrayList<Integer>)indices.clone();
      
      return newObject;
   }
   
   public Sublist addItem( int indexOfItemToAdd){
 	 this.sum += this.originalObjects.get(indexOfItemToAdd);
 	 indices.add(indexOfItemToAdd);
 	 return this;
 	 
   } 
   void showSublist(){
	   System.out.println("sum: " + sum);
	   for (int i = 0; i < indices.size(); i++){
		   System.out.println("array[" + indices.get(i) + "]: " + originalObjects.get(indices.get(i)));
	   }
   }
   
}


---------------Console OF RUN A--------------------

Target time: 72
Sublist -----------------------------
sum: 72
array[0]: 2
array[2]: 22
array[3]: 5
array[4]: 15
array[6]: 9
array[7]: 19


--------------Foothill Class Part B---------------

// FHstack main
// CS 1C, Foothill College, Michael Loceff, creator

// import statement needed to gain access to the entire class
import cs_1c.*;

import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.*;

public class Foothill
{

	// -------  main --------------
	public static void main(String[] args) throws Exception
	{
		int target = 3600;
		ArrayList<iTunesEntry> dataSet = new ArrayList<iTunesEntry>();
		ArrayList<Sublist> choices = new ArrayList<Sublist>();
		int k, j, numSets, max, kBest, arraySize, masterSum;
		max = 0;
		kBest = 0;
		boolean foundPerfect;

		// for formatting and timing
		NumberFormat tidy = NumberFormat.getInstance(Locale.US);
		tidy.setMaximumFractionDigits(4);
		long startTime, stopTime, totalTime; 

		// read the iTunes Data
		iTunesEntryReader tunesInput = new iTunesEntryReader("/Users/mikey/Documents/java2c/Hello_World/itunes_file.txt");

		// test the success of the read:
		if (tunesInput.readError())
		{
			System.out.println("couldn't open " + tunesInput.getFileName()
			+ " for input.");
			return;
		}
		// load the dataSet ArrayList with the iTunes:
		arraySize = tunesInput.getNumTunes();

		for (k = 0; k < arraySize; k++)
			dataSet.add(tunesInput.getTune(k));

		choices.clear();
		//start 
		startTime = System.nanoTime();
		Sublist sublist = new Sublist(dataSet);
		choices.add(sublist);

		for (k = 0; k < arraySize; k++){
			ArrayList<Sublist> toAdd = new ArrayList<>();
			for (j = 0; j < choices.size(); j++){
				if(choices.get(j).getSum() + dataSet.get(k).getTime() <= target){
					toAdd.add(((Sublist)choices.get(j).clone()).addItem(k));
					if(choices.get(j).getSum() + dataSet.get(k).getTime() == target){
						k = dataSet.size() + 1;
						break;
					}
				}
			}
			choices.addAll(toAdd);
		}
		for (int i = 0; i < choices.size(); i++){
			if(choices.get(i).getSum() > max){
				max = choices.get(i).getSum();
				kBest = i;
			}
		}
		stopTime = System.nanoTime();
		totalTime = (stopTime - startTime);
		final double totalSeconds = ((double)totalTime/1000000000);
		System.out.println("Target time: " + target);

		// code supplied by student
		choices.get(kBest).showSublist();
		System.out.println("\n Algorithm RunTime: " + new DecimalFormat("#.###").format(totalSeconds) + " seconds");

	}
}
class Sublist implements Cloneable
{
	private int sum = 0;
	private ArrayList<iTunesEntry> originalObjects;
	private ArrayList<Integer> indices;

	// constructor creates an empty Sublist (no indices)
	public Sublist(ArrayList<iTunesEntry> orig) 
	{
		sum = 0;
		originalObjects = orig;
		indices = new ArrayList<Integer>();
	}


	int getSum() { return sum; }

	// I have done the clone() for you, since you will need clone() inside addItem().
	public Object clone() throws CloneNotSupportedException
	{
		// shallow copy
		Sublist newObject = (Sublist)super.clone();
		// deep copy
		newObject.indices = (ArrayList<Integer>)indices.clone();

		return newObject;
	}

	public Sublist addItem( int indexOfItemToAdd){
		this.sum += this.originalObjects.get(indexOfItemToAdd).getTime();
		indices.add(indexOfItemToAdd);
		return this;

	}
	void showSublist(){
		System.out.println("sum: " + sum);
		for (int i = 0; i < indices.size(); i++){
			System.out.println("array[" + indices.get(i) + "]: " + originalObjects.get(indices.get(i)));
		}
	}

}

---------------Console OF RUN B--------------------

Target time: 3600
sum: 3600
array[0]: Carrie Underwood | Cowboy Casanova |  3:56
array[1]: Carrie Underwood | Quitter |  3:40
array[2]: Rihanna | Russian Roulette |  3:48
array[4]: Foo Fighters | Monkey Wrench |  3:50
array[5]: Eric Clapton | Pretending |  4:43
array[6]: Eric Clapton | Bad Love |  5:08
array[7]: Howlin' Wolf | Everybody's In The Mood |  2:58
array[8]: Howlin' Wolf | Well That's All Right |  2:55
array[9]: Reverend Gary Davis | Samson and Delilah |  3:36
array[11]: Roy Buchanan | Hot Cha |  3:28
array[12]: Roy Buchanan | Green Onions |  7:23
array[13]: Janiva Magness | I'm Just a Prisoner |  3:50
array[14]: Janiva Magness | You Were Never Mine |  4:36
array[15]: John Lee Hooker | Hobo Blues |  3:07
array[16]: John Lee Hooker | I Can't Quit You Baby |  3:02

 Algorithm RunTime: 0.112 seconds

